-- --------------------------------------------------------
-- Script completo para configurar la base de datos
-- --------------------------------------------------------

-- --------------------------------------------------------
-- Tabla: tariffs
-- --------------------------------------------------------

CREATE TABLE IF NOT EXISTS public.tariffs (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  price numeric NOT NULL,
  icon text,
  CONSTRAINT tariffs_name_key UNIQUE (name)
);

ALTER TABLE public.tariffs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read access to tariffs"
ON public.tariffs
FOR SELECT
USING (true);

-- --------------------------------------------------------
-- Tabla: service_requests
-- --------------------------------------------------------

CREATE TYPE public.service_request_status AS ENUM (
  'pending',
  'accepted',
  'in_progress',
  'completed',
  'cancelled'
);

CREATE TABLE IF NOT EXISTS public.service_requests (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  origin text NOT NULL,
  destination text NOT NULL,
  description text,
  tariff_id bigint REFERENCES public.tariffs(id) NOT NULL,
  user_id uuid REFERENCES auth.users(id) NOT NULL,
  scheduled_at timestamp with time zone,
  status public.service_request_status DEFAULT 'pending'::public.service_request_status NOT NULL
);

ALTER TABLE public.service_requests ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow individual insert for service_requests"
ON public.service_requests
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow individual read access for service_requests"
ON public.service_requests
FOR SELECT
USING (auth.uid() = user_id);

-- --------------------------------------------------------
-- Tabla: categories
-- --------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.categories (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  icon text,
  CONSTRAINT categories_name_key UNIQUE (name)
);

ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to categories" ON public.categories FOR SELECT USING (true);


-- --------------------------------------------------------
-- Tabla: admin_users (para RLS)
-- --------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.admin_users (
  user_id uuid REFERENCES auth.users(id) PRIMARY KEY
);

ALTER TABLE public.admin_users ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read access to admin_users"
ON public.admin_users
FOR SELECT
USING (true);

-- --------------------------------------------------------
-- Tabla: restaurants
-- --------------------------------------------------------

CREATE TABLE IF NOT EXISTS public.restaurants (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  "imageUrl" text,
  rating numeric,
  "deliveryFee" numeric,
  "deliveryTime" integer
);

ALTER TABLE public.restaurants ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read access to restaurants"
ON public.restaurants
FOR SELECT
USING (true);

CREATE POLICY "Allow admin full access"
ON public.restaurants
FOR ALL
USING (auth.uid() IN (SELECT user_id FROM public.admin_users)); -- TODO: Implement actual role check for admin users

-- --------------------------------------------------------
-- Tabla: restaurant_categories (Many-to-Many)
-- --------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.restaurant_categories (
    restaurant_id bigint REFERENCES public.restaurants(id) ON DELETE CASCADE,
    category_id bigint REFERENCES public.categories(id) ON DELETE CASCADE,
    PRIMARY KEY (restaurant_id, category_id)
);

ALTER TABLE public.restaurant_categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access" ON public.restaurant_categories FOR SELECT USING (true);


-- --------------------------------------------------------
-- Tabla: menu_items
-- --------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.menu_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    restaurant_id bigint REFERENCES public.restaurants(id) ON DELETE CASCADE NOT NULL,
    name text NOT NULL,
    price numeric NOT NULL,
    rating numeric,
    reviews integer,
    "imageUrl" text,
    description text,
    ingredients jsonb,
    "isPopular" boolean DEFAULT false
);

ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to menu_items" ON public.menu_items FOR SELECT USING (true);
CREATE POLICY "Allow admin full access for menu_items" ON public.menu_items FOR ALL USING (auth.uid() IN (SELECT user_id FROM public.admin_users)); -- TODO: Implement actual role check for admin users


-- --------------------------------------------------------
-- Inserci√≥n de datos iniciales
-- --------------------------------------------------------

-- Insertar tarifas
INSERT INTO public.tariffs (name, price, icon)
VALUES
  ('C√©ntrico', 45, 'LocationIcon'),
  ('Plaza', 70, 'LockIcon'),
  ('For√°neos', 250, 'ForaneosIcon')
ON CONFLICT (name) DO NOTHING;

-- Insertar categor√≠as
INSERT INTO public.categories (name, icon)
VALUES
  ('All', 'üî•'),
  ('Pizza', 'üçï'),
  ('Burger', 'üçî'),
  ('Sushi', 'üç£'),
  ('Wings', 'üçó'),
  ('Tacos', 'üåÆ'),
  ('Chiken', 'üçó'),
  ('Riche', 'üçö'),
  ('Americana', 'üá∫üá∏')
ON CONFLICT (name) DO NOTHING;

-- Insertar restaurantes
INSERT INTO public.restaurants (id, name, "imageUrl", rating, "deliveryFee", "deliveryTime")
VALUES
(1, 'Rose Garden Restaurant', 'https://images.unsplash.com/photo-1504674900247-0877df9cc836?q=80&w=2070&auto=format&fit=crop', 4.7, 0, 20),
(4, 'Burger Joint', 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?q=80&w=1998&auto=format&fit=crop', 4.8, 20, 25)
ON CONFLICT (id) DO UPDATE SET 
  name = EXCLUDED.name,
  "imageUrl" = EXCLUDED."imageUrl",
  rating = EXCLUDED.rating,
  "deliveryFee" = EXCLUDED."deliveryFee",
  "deliveryTime" = EXCLUDED."deliveryTime";

-- Vincular restaurantes a categor√≠as
INSERT INTO public.restaurant_categories (restaurant_id, category_id)
VALUES
  (1, (SELECT id from categories WHERE name = 'Burger')),
  (1, (SELECT id from categories WHERE name = 'Chiken')),
  (1, (SELECT id from categories WHERE name = 'Wings')),
  (4, (SELECT id from categories WHERE name = 'Burger')),
  (4, (SELECT id from categories WHERE name = 'Americana'))
ON CONFLICT (restaurant_id, category_id) DO NOTHING;


-- Insertar items del men√∫
INSERT INTO public.menu_items (id, restaurant_id, name, price, rating, reviews, "isPopular", "imageUrl", description, ingredients)
VALUES
(101, 1, 'Pizza Margherita', 150, 4.8, 120, false, 'https://images.unsplash.com/photo-1574071318508-1cdbab80d002?q=80&w=2069&auto=format&fit=crop', 'Salsa de tomate, mozzarella fresca, albahaca y un toque de aceite de oliva.', '[{"name": "Tomate", "icon": "PeppersIcon"}, {"name": "Queso", "icon": "SaltIcon"}, {"name": "Albahaca", "icon": "BroccoliIcon"}]'),
(102, 1, 'Chicken Thai Biriyani', 260, 4.9, 215, true, 'https://images.unsplash.com/photo-1631515243349-e0cb75fb8da7?q=80&w=1974&auto=format&fit=crop', 'Un exquisito plato de arroz con pollo marinado en especias tailandesas y un toque picante.', '[{"name": "Pollo", "icon": "ChickenIcon"}, {"name": "Arroz", "icon": "SaltIcon"}, {"name": "Cebolla", "icon": "OnionIcon"}, {"name": "Ajo", "icon": "GarlicIcon"}, {"name": "Jengibre", "icon": "GingerIcon"}, {"name": "Chile", "icon": "PeppersIcon"}]'),
(401, 4, 'Classic Cheeseburger', 190, 4.7, 350, true, 'https://images.unsplash.com/photo-1550547660-d9450f859349?q=80&w=1965&auto=format&fit=crop', 'Carne de res premium, queso americano derretido, lechuga fresca y tomate jugoso.', '[{"name": "Carne", "icon": "ChickenIcon"}, {"name": "Queso", "icon": "SaltIcon"}, {"name": "Cebolla", "icon": "OnionIcon"}, {"name": "Lechuga", "icon": "BroccoliIcon"}]'),
(402, 4, 'Bacon Burger', 220, 4.8, 280, false, 'https://images.unsplash.com/photo-1606132923582-e006274b3573?q=80&w=1974&auto=format&fit=crop', 'Nuestra cl√°sica hamburguesa con queso, elevada con tiras de tocino crujiente.', '[{"name": "Carne", "icon": "ChickenIcon"}, {"name": "Queso", "icon": "SaltIcon"}, {"name": "Tocino", "icon": "PeppersIcon"}, {"name": "Cebolla", "icon": "OnionIcon"}]'),
(403, 4, 'Papas Fritas', 60, 4.5, 500, false, 'https://images.unsplash.com/photo-1541592106381-b31e9677c0e5?q=80&w=2070&auto=format&fit=crop', 'Papas a la francesa doradas a la perfecci√≥n, crujientes por fuera y suaves por dentro.', '[{"name": "Papa", "icon": "BroccoliIcon"}, {"name": "Sal", "icon": "SaltIcon"}]')
ON CONFLICT (id) DO UPDATE SET
  name = EXCLUDED.name;